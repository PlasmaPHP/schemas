{"Plasma\\Schemas\\Repository":{"name":"Plasma\\Schemas\\Repository","line":21,"short_desc":"The repository is responsible for turning rows into specified PHP object.","long_desc":"The repository uses internally an actual plasma client, itself has no client implementation.\nNot implementing the interface prevents bugs (expecting a query result but getting a schema collection).\n\nSELECT queries will be wrapped (if a schema builder exists for the table) within a `SchemaCollection`.\nAll other queries get returned as is.","hint":null,"tags":[],"namespace":"Plasma\\Schemas","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-schemas\/master\/src\/Repository.php","relative_file":"\/src\/Repository.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Evenement\\EventEmitterInterface":"Evenement\\EventEmitterInterface"},"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":36,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":36,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\ClientInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","ClientInterface"],"attributes":{"startLine":36,"endLine":36}},"default":null,"variadic":false,"is_by_ref":false}}},"beginTransaction":{"name":"beginTransaction","line":122,"short_desc":"Begins a transaction. Resolves with a `TransactionInterface` instance.","long_desc":"Checks out a connection until the transaction gets committed or rolled back.\nIt must be noted that the user is responsible for finishing the transaction. The client WILL NOT automatically\ncheck the connection back into the pool, as long as the transaction is not finished.\n\nSome databases, including MySQL, automatically issue an implicit COMMIT when a database definition language (DDL)\nstatement such as DROP TABLE or CREATE TABLE is issued within a transaction.\nThe implicit COMMIT will prevent you from rolling back any other changes within the transaction boundary.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\TransactionInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"isolation":{"name":"isolation","line":122,"short_desc":"See the `TransactionInterface` constants.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\Plasma\\TransactionInterface::ISOLATION_COMMITTED","variadic":false,"is_by_ref":false}}},"checkinConnection":{"name":"checkinConnection","line":103,"short_desc":"Checks a connection back in, if usable and not closing.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"driver":{"name":"driver","line":103,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\DriverInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","DriverInterface"],"attributes":{"startLine":103,"endLine":103}},"default":null,"variadic":false,"is_by_ref":false}}},"close":{"name":"close","line":132,"short_desc":"Closes all connections gracefully after processing all outstanding requests.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"createReadCursor":{"name":"createReadCursor","line":174,"short_desc":"Creates a new cursor to seek through SELECT query results. Resolves with a `CursorInterface` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\LogicException","Thrown if the driver or DBMS does not support cursors."],["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":174,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"params":{"name":"params","line":174,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"execute":{"name":"execute","line":210,"short_desc":"Prepares and executes a query. Resolves with a `QueryResultInterface` instance.","long_desc":"This is equivalent to prepare -> execute -> close.\nIf you need to execute a query multiple times, prepare the query manually for performance reasons.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":210,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"params":{"name":"params","line":210,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"getClient":{"name":"getClient","line":44,"short_desc":"Get the internally used client.","long_desc":"","hint":[["\\Plasma\\ClientInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getConnectionCount":{"name":"getConnectionCount","line":94,"short_desc":"Get the amount of connections.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getSchemaBuilder":{"name":"getSchemaBuilder","line":54,"short_desc":"Get the Schema Builder for the schema.","long_desc":"","hint":[["\\Plasma\\Schemas\\SchemaBuilderInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"schemaName":{"name":"schemaName","line":54,"short_desc":"The schema name. This would be the table name.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"prepare":{"name":"prepare","line":196,"short_desc":"Prepares a query. Resolves with a `StatementInterface` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":196,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"query":{"name":"query","line":185,"short_desc":"Executes a plain query. Resolves with a `QueryResultInterface` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\QueryResultInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":185,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"quit":{"name":"quit","line":140,"short_desc":"Forcefully closes the connection, without waiting for any outstanding requests. This will reject all outstanding requests.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"quote":{"name":"quote","line":222,"short_desc":"Quotes the string for use in the query.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\LogicException","Thrown if the driver does not support quoting."],["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"str":{"name":"str","line":222,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"type":{"name":"type","line":222,"short_desc":"For types, see the driver interface constants.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\Plasma\\DriverInterface::QUOTE_TYPE_VALUE","variadic":false,"is_by_ref":false}}},"registerSchemaBuilder":{"name":"registerSchemaBuilder","line":69,"short_desc":"Register a Schema Builder for the schema to be used by the Repository.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"schemaName":{"name":"schemaName","line":69,"short_desc":"The schema name. This would be the table name.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"schemaBuilder":{"name":"schemaBuilder","line":69,"short_desc":"The schema builder for the schema.","long_desc":null,"hint":[["\\Plasma\\Schemas\\SchemaBuilderInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","Schemas","SchemaBuilderInterface"],"attributes":{"startLine":69,"endLine":69}},"default":null,"variadic":false,"is_by_ref":false}}},"runCommand":{"name":"runCommand","line":150,"short_desc":"Runs the given command.","long_desc":"","hint":[["mixed",false]],"hint_desc":"Return depends on command and driver.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception","Thrown if the client is closing all connections."]],"errors":[],"example":null,"source":null,"parameters":{"command":{"name":"command","line":150,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\CommandInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","CommandInterface"],"attributes":{"startLine":150,"endLine":150}},"default":null,"variadic":false,"is_by_ref":false}}},"runQuery":{"name":"runQuery","line":162,"short_desc":"Runs the given querybuilder on an underlying driver instance.","long_desc":"The driver CAN throw an exception if the given querybuilder is not supported.\nAn example would be a SQL querybuilder and a Cassandra driver.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":162,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\QueryBuilderInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","QueryBuilderInterface"],"attributes":{"startLine":162,"endLine":162}},"default":null,"variadic":false,"is_by_ref":false}}},"unregisterSchemaBuilder":{"name":"unregisterSchemaBuilder","line":85,"short_desc":"Unregister the Schema Builder of the schema.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"schemaName":{"name":"schemaName","line":85,"short_desc":"The schema name. This would be the table name.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"Plasma\\Schemas\\SQLSchemaBuilder":{"name":"Plasma\\Schemas\\SQLSchemaBuilder","line":15,"short_desc":"This is a SQL Schema Builder implementation.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma\\Schemas","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-schemas\/master\/src\/SQLSchemaBuilder.php","relative_file":"\/src\/SQLSchemaBuilder.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Plasma\\Schemas\\SchemaBuilderInterface":"Plasma\\Schemas\\SchemaBuilderInterface"},"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":37,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"schema":{"name":"schema","line":37,"short_desc":"The class name of the schema to build for.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"grammar":{"name":"grammar","line":37,"short_desc":"The SQL grammar to use.","long_desc":null,"hint":[["\\Plasma\\SQL\\GrammarInterface",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["Plasma","SQL","GrammarInterface"],"attributes":{"startLine":37,"endLine":37}},"attributes":{"startLine":37,"endLine":37}},"default":null,"variadic":false,"is_by_ref":false}}},"buildSchemas":{"name":"buildSchemas","line":304,"short_desc":"Builds schemas for the given SELECT query result.","long_desc":"","hint":[["\\Plasma\\Schemas\\SchemaCollection",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"result":{"name":"result","line":304,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\QueryResultInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","QueryResultInterface"],"attributes":{"startLine":304,"endLine":304}},"default":null,"variadic":false,"is_by_ref":false}}},"fetch":{"name":"fetch","line":71,"short_desc":"Fetch a row by the unique identifier. Resolves with an instance of `SchemaCollection`.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":71,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"fetchAll":{"name":"fetchAll","line":109,"short_desc":"Fetches all rows. Resolves with an instance of `SchemaCollection`.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":[]},"fetchBy":{"name":"fetchBy","line":88,"short_desc":"Fetch a row by the specified column. Resolves with an instance of `SchemaCollection`.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":88,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":88,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"getRepository":{"name":"getRepository","line":52,"short_desc":"Gets the repository.","long_desc":"","hint":[["\\Plasma\\Schemas\\Repository",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"insert":{"name":"insert","line":130,"short_desc":"Inserts a row. Resolves with an instance of `SchemaCollection`, if there is a primary column. Otherwise resolves with the query result.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":130,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"insertAll":{"name":"insertAll","line":212,"short_desc":"Inserts a list of rows. Resolves with an instance of `SchemaCollection`.","long_desc":"All inserts get wrapped into a transaction.\n\nOptions is an optional array, which supports these options:\n```\narray(\n    'ignoreConflict' => bool, (whether duplicate key conflicts get ignored, defaults to false)\n    'conflictResolution' => \\Plasma\\Schema\\OnConflict, (a conflict resolution strategy, this option takes precedence)\n    'transactionIsolation' => int, (a transaction isolation level from the TransactionInterface constants, defaults to ISOLATION_COMMITTED)\n)\n```\n\nThis method has a dependency on the `plasma\/sql-common` package.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""],["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":212,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":212,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"setRepository":{"name":"setRepository","line":61,"short_desc":"Sets the repository to use.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"repository":{"name":"repository","line":61,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\Schemas\\Repository",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","Schemas","Repository"],"attributes":{"startLine":61,"endLine":61}},"default":null,"variadic":false,"is_by_ref":false}}},"update":{"name":"update","line":280,"short_desc":"Updates the row with the given data, identified by a specific field.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":280,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"field":{"name":"field","line":280,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":280,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"Plasma\\Schemas\\Schema":{"name":"Plasma\\Schemas\\Schema","line":18,"short_desc":"This is a schema class which maps each rows column to a camelcase property.","long_desc":"This class must be extended and the properties must be provided by the extending class (but not as private).\nThis allows validation and match expectations.","hint":null,"tags":[],"namespace":"Plasma\\Schemas","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-schemas\/master\/src\/Schema.php","relative_file":"\/src\/Schema.php","parent":null,"modifiers":16,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Plasma\\Schemas\\SchemaInterface":"Plasma\\Schemas\\SchemaInterface"},"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":35,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"repo":{"name":"repo","line":35,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\Schemas\\Repository",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","Schemas","Repository"],"attributes":{"startLine":35,"endLine":35}},"default":null,"variadic":false,"is_by_ref":false},"row":{"name":"row","line":35,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"build":{"name":"build","line":89,"short_desc":"Builds a schema instance.","long_desc":"","hint":[["\\Plasma\\Schemas\\SchemaInterface",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"repository":{"name":"repository","line":89,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\Schemas\\Repository",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","Schemas","Repository"],"attributes":{"startLine":89,"endLine":89}},"default":null,"variadic":false,"is_by_ref":false},"row":{"name":"row","line":89,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"delete":{"name":"delete","line":163,"short_desc":"Deletes the row. Resolves with a `QueryResultInterface` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":[]},"getDefinition":{"name":"getDefinition","line":97,"short_desc":"Returns the schema definition.","long_desc":"","hint":[["\\Plasma\\ColumnDefinitionInterface",true]],"hint_desc":"","tags":[],"modifiers":25,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getIdentifierColumn":{"name":"getIdentifierColumn","line":109,"short_desc":"Returns the name of the identifier column (primary or unique), or null.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":25,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getTableName":{"name":"getTableName","line":103,"short_desc":"Returns the name of the table.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":25,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"insert":{"name":"insert","line":116,"short_desc":"Inserts the schema.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":[]},"toArray":{"name":"toArray","line":183,"short_desc":"Returns an array with all values mapped by the column name.","long_desc":"","hint":[["array",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"update":{"name":"update","line":136,"short_desc":"Updates the row with the new data. Resolves with a `QueryResultInterface` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":136,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"validateData":{"name":"validateData","line":78,"short_desc":"Child classes can override this method to implement some sort of validation.","long_desc":"This method gets invoked after assigning the properties. It has no functionality by default.","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\Schemas\\SchemaBuilderInterface":{"name":"Plasma\\Schemas\\SchemaBuilderInterface","line":15,"short_desc":"Schema Builders are responsible for creating individual schemas from query results.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma\\Schemas","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-schemas\/master\/src\/SchemaBuilderInterface.php","relative_file":"\/src\/SchemaBuilderInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"buildSchemas":{"name":"buildSchemas","line":89,"short_desc":"Builds schemas for the given SELECT query result.","long_desc":"","hint":[["\\Plasma\\Schemas\\SchemaCollection",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"result":{"name":"result","line":89,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\QueryResultInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","QueryResultInterface"],"attributes":{"startLine":89,"endLine":89}},"default":null,"variadic":false,"is_by_ref":false}}},"fetch":{"name":"fetch","line":29,"short_desc":"Fetch a row by the unique identifier. Resolves with an instance of `SchemaCollection`.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":29,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"fetchAll":{"name":"fetchAll","line":45,"short_desc":"Fetches all rows. Resolves with an instance of `SchemaCollection`.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":[]},"fetchBy":{"name":"fetchBy","line":38,"short_desc":"Fetch a row by the specified column. Resolves with an instance of `SchemaCollection`.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":38,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":38,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"insert":{"name":"insert","line":53,"short_desc":"Inserts a row. Resolves with an instance of `SchemaCollection`.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":53,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"insertAll":{"name":"insertAll","line":72,"short_desc":"Inserts a list of rows. Resolves with an instance of `SchemaCollection`.","long_desc":"Options is an optional array, which supports these options:\n```\narray(\n    'ignoreConflict' => bool, (whether duplicate key conflicts get ignored, defaults to false)\n)\n```\n\nSome builders may support more options.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":72,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":72,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"setRepository":{"name":"setRepository","line":21,"short_desc":"Sets the repository to use.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"repository":{"name":"repository","line":21,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\Schemas\\Repository",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","Schemas","Repository"],"attributes":{"startLine":21,"endLine":21}},"default":null,"variadic":false,"is_by_ref":false}}},"update":{"name":"update","line":82,"short_desc":"Updates the row with the given data, identified by a specific field.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":82,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"field":{"name":"field","line":82,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":82,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"Plasma\\Schemas\\SchemaCollection":{"name":"Plasma\\Schemas\\SchemaCollection","line":15,"short_desc":"Schema Collections hold schemas and the associated query result together.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma\\Schemas","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-schemas\/master\/src\/SchemaCollection.php","relative_file":"\/src\/SchemaCollection.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":31,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"schemas":{"name":"schemas","line":31,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"result":{"name":"result","line":31,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\QueryResultInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","QueryResultInterface"],"attributes":{"startLine":31,"endLine":31}},"default":null,"variadic":false,"is_by_ref":false}}},"getResult":{"name":"getResult","line":48,"short_desc":"Get the query result.","long_desc":"","hint":[["\\Plasma\\QueryResultInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getSchemas":{"name":"getSchemas","line":40,"short_desc":"Get the stored schemas.","long_desc":"","hint":[["\\Plasma\\Schemas\\SchemaInterface",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"Plasma\\Schemas\\SchemaInterface":{"name":"Plasma\\Schemas\\SchemaInterface","line":15,"short_desc":"Schemas represent data rows and as such can be used to interact with the DBMS through the Repository and Schema Builder.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma\\Schemas","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-schemas\/master\/src\/SchemaInterface.php","relative_file":"\/src\/SchemaInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"build":{"name":"build","line":23,"short_desc":"Builds a schema instance.","long_desc":"","hint":[["\\Plasma\\Schemas\\SchemaInterface",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"repository":{"name":"repository","line":23,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\Schemas\\Repository",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","Schemas","Repository"],"attributes":{"startLine":23,"endLine":23}},"default":null,"variadic":false,"is_by_ref":false},"row":{"name":"row","line":23,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"delete":{"name":"delete","line":63,"short_desc":"Deletes the row.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":[]},"getDefinition":{"name":"getDefinition","line":29,"short_desc":"Returns the schema definition.","long_desc":"","hint":[["\\Plasma\\ColumnDefinitionInterface",true]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getIdentifierColumn":{"name":"getIdentifierColumn","line":41,"short_desc":"Returns the name of the identifier column (primary or unique), or null.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getTableName":{"name":"getTableName","line":35,"short_desc":"Returns the name of the table.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"insert":{"name":"insert","line":48,"short_desc":"Inserts the row.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":[]},"update":{"name":"update","line":56,"short_desc":"Updates the row with the new data.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":56,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"Plasma\\Schemas\\Statement":{"name":"Plasma\\Schemas\\Statement","line":15,"short_desc":"Represents a Prepared Statement. This class however wraps a statement instance.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma\\Schemas","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-schemas\/master\/src\/Statement.php","relative_file":"\/src\/Statement.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Plasma\\StatementInterface":"Plasma\\StatementInterface"},"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":31,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"repo":{"name":"repo","line":31,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\Schemas\\Repository",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","Schemas","Repository"],"attributes":{"startLine":31,"endLine":31}},"default":null,"variadic":false,"is_by_ref":false},"statement":{"name":"statement","line":31,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\StatementInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","StatementInterface"],"attributes":{"startLine":31,"endLine":31}},"default":null,"variadic":false,"is_by_ref":false}}},"close":{"name":"close","line":66,"short_desc":"Closes the prepared statement and frees the associated resources on the server.","long_desc":"Closing a statement more than once SHOULD have no effect.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"execute":{"name":"execute","line":77,"short_desc":"Executes the prepared statement. Resolves with a `QueryResult` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\QueryResultInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"params":{"name":"params","line":77,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"getID":{"name":"getID","line":41,"short_desc":"Get the driver-dependent ID of this statement.","long_desc":"The return type can be of ANY type, as the ID depends on the driver and DBMS.","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getQuery":{"name":"getQuery","line":49,"short_desc":"Get the prepared query.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isClosed":{"name":"isClosed","line":57,"short_desc":"Whether the statement has been closed.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"runQuery":{"name":"runQuery","line":89,"short_desc":"Runs the given querybuilder on an underlying driver instance.","long_desc":"The driver CAN throw an exception if the given querybuilder is not supported.\nAn example would be a SQL querybuilder and a Cassandra driver.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":89,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\QueryBuilderInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","QueryBuilderInterface"],"attributes":{"startLine":89,"endLine":89}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"Plasma\\Schemas\\Transaction":{"name":"Plasma\\Schemas\\Transaction","line":15,"short_desc":"Represents a Transaction. This class wraps a Transaction.","long_desc":"","hint":null,"tags":[],"namespace":"Plasma\\Schemas","file":"\/volume3\/web\/github\/repos\/PlasmaPHP-schemas\/master\/src\/Transaction.php","relative_file":"\/src\/Transaction.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Plasma\\TransactionInterface":"Plasma\\TransactionInterface"},"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":31,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"repo":{"name":"repo","line":31,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\Schemas\\Repository",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","Schemas","Repository"],"attributes":{"startLine":31,"endLine":31}},"default":null,"variadic":false,"is_by_ref":false},"transaction":{"name":"transaction","line":31,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\TransactionInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","TransactionInterface"],"attributes":{"startLine":31,"endLine":31}},"default":null,"variadic":false,"is_by_ref":false}}},"__destruct":{"name":"__destruct","line":40,"short_desc":"Destructor.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"commit":{"name":"commit","line":128,"short_desc":"Commits the changes.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":[]},"createSavepoint":{"name":"createSavepoint","line":147,"short_desc":"Creates a savepoint with the given identifier.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"identifier":{"name":"identifier","line":147,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"execute":{"name":"execute","line":95,"short_desc":"Prepares and executes a query. Resolves with a `QueryResultInterface` instance.","long_desc":"This is equivalent to prepare -> execute -> close.\nIf you need to execute a query multiple times, prepare the query manually for performance reasons.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."],["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":95,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"params":{"name":"params","line":95,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"getIsolationLevel":{"name":"getIsolationLevel","line":48,"short_desc":"Get the isolation level for this transaction.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isActive":{"name":"isActive","line":56,"short_desc":"Whether the transaction is still active, or has been committed\/rolled back.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"prepare":{"name":"prepare","line":78,"short_desc":"Prepares a query. Resolves with a `StatementInterface` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\StatementInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":78,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"query":{"name":"query","line":67,"short_desc":"Executes a plain query. Resolves with a `QueryResult` instance.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Plasma\\QueryResultInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":67,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"quote":{"name":"quote","line":107,"short_desc":"Quotes the string for use in the query.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\LogicException","Thrown if the driver does not support quoting."],["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"str":{"name":"str","line":107,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"type":{"name":"type","line":107,"short_desc":"For types, see the driver interface constants.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\Plasma\\DriverInterface::QUOTE_TYPE_VALUE","variadic":false,"is_by_ref":false}}},"releaseSavepoint":{"name":"releaseSavepoint","line":167,"short_desc":"Releases the savepoint with the given identifier.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"identifier":{"name":"identifier","line":167,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"rollback":{"name":"rollback","line":137,"short_desc":"Rolls back the changes.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":[]},"rollbackTo":{"name":"rollbackTo","line":157,"short_desc":"Rolls back to the savepoint with the given identifier.","long_desc":"","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\TransactionException","Thrown if the transaction has been committed or rolled back."]],"errors":[],"example":null,"source":null,"parameters":{"identifier":{"name":"identifier","line":157,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"runQuery":{"name":"runQuery","line":119,"short_desc":"Runs the given querybuilder on the underlying driver instance.","long_desc":"The driver CAN throw an exception if the given querybuilder is not supported.\nAn example would be a SQL querybuilder and a Cassandra driver.","hint":[["\\React\\Promise\\PromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Plasma\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":119,"short_desc":"","long_desc":null,"hint":[["\\Plasma\\QueryBuilderInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Plasma","QueryBuilderInterface"],"attributes":{"startLine":119,"endLine":119}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]}}